// gosnippets (c) 2023-2024 He Xian <hexian000@outlook.com>
// This code is licensed under MIT license (see LICENSE for details)

package formats_test

import (
	"fmt"
	"math"
	"testing"
	"time"

	"github.com/hexian000/gosnippets/formats"
)

func TestSIPrefix(t *testing.T) {
	zero := 0.0
	cases := [...]struct {
		in float64
		s  string
	}{
		{math.NaN(), "NaN"}, {-math.NaN(), "NaN"},
		{math.Inf(1), "+Inf"}, {math.Inf(-1), "-Inf"},
		{zero, "0"}, {-zero, "-0"},
		{1e-39 / 3., "3.33e-10q"},
		{1e-38 / 3., "3.33e-09q"},
		{1e-37 / 3., "3.33e-08q"},
		{1e-36 / 3., "3.33e-07q"},
		{1e-35 / 3., "3.33e-06q"},
		{1e-34 / 3., "3.33e-05q"},
		{1e-33 / 3., "0.000333q"},
		{1e-32 / 3., "0.00333q"},
		{1e-31 / 3., "0.0333q"},
		{1e-30 / 3., "0.333q"},
		{1e-29 / 3., "3.33q"},
		{1e-28 / 3., "33.3q"},
		{1e-27 / 3., "333q"},
		{1e-26 / 3., "3.33r"},
		{1e-25 / 3., "33.3r"},
		{1e-24 / 3., "333r"},
		{1e-23 / 3., "3.33y"},
		{1e-22 / 3., "33.3y"},
		{1e-21 / 3., "333y"},
		{1e-20 / 3., "3.33z"},
		{1e-19 / 3., "33.3z"},
		{1e-18 / 3., "333z"},
		{1e-17 / 3., "3.33a"},
		{1e-16 / 3., "33.3a"},
		{1e-15 / 3., "333a"},
		{1e-14 / 3., "3.33f"},
		{1e-13 / 3., "33.3f"},
		{1e-12 / 3., "333f"},
		{1e-11 / 3., "3.33p"},
		{1e-10 / 3., "33.3p"},
		{1e-09 / 3., "333p"},
		{1e-08 / 3., "3.33n"},
		{1e-07 / 3., "33.3n"},
		{1e-06 / 3., "333n"},
		{1e-05 / 3., "3.33μ"},
		{1e-04 / 3., "33.3μ"},
		{1e-03 / 3., "333μ"},
		{1e-02 / 3., "3.33m"},
		{1e-01 / 3., "33.3m"},
		{1e+00 / 3., "333m"},
		{1e+01 / 3., "3.33"},
		{1e+02 / 3., "33.3"},
		{1e+03 / 3., "333"},
		{1e+04 / 3., "3.33k"},
		{1e+05 / 3., "33.3k"},
		{1e+06 / 3., "333k"},
		{1e+07 / 3., "3.33M"},
		{1e+08 / 3., "33.3M"},
		{1e+09 / 3., "333M"},
		{1e+10 / 3., "3.33G"},
		{1e+11 / 3., "33.3G"},
		{1e+12 / 3., "333G"},
		{1e+13 / 3., "3.33T"},
		{1e+14 / 3., "33.3T"},
		{1e+15 / 3., "333T"},
		{1e+16 / 3., "3.33P"},
		{1e+17 / 3., "33.3P"},
		{1e+18 / 3., "333P"},
		{1e+19 / 3., "3.33E"},
		{1e+20 / 3., "33.3E"},
		{1e+21 / 3., "333E"},
		{1e+22 / 3., "3.33Z"},
		{1e+23 / 3., "33.3Z"},
		{1e+24 / 3., "333Z"},
		{1e+25 / 3., "3.33Y"},
		{1e+26 / 3., "33.3Y"},
		{1e+27 / 3., "333Y"},
		{1e+28 / 3., "3.33R"},
		{1e+29 / 3., "33.3R"},
		{1e+30 / 3., "333R"},
		{1e+31 / 3., "3.33Q"},
		{1e+32 / 3., "33.3Q"},
		{1e+33 / 3., "333Q"},
		{1e+34 / 3., "3.33e+03Q"},
		{1e+35 / 3., "3.33e+04Q"},
		{1e+36 / 3., "3.33e+05Q"},
		{1e+37 / 3., "3.33e+06Q"},
		{1e+38 / 3., "3.33e+07Q"},
	}
	for _, c := range cases {
		result := formats.SIPrefix(c.in)
		if result != c.s {
			t.Fatalf("expect \"%s\", got \"%s\"", c.s, result)
		}
		fmt.Printf("|%16s|\n", result)
		// fmt.Printf("{%.0e/3., \"%s\"},\n", c.in*3., result)
	}
}

func TestIECBytes(t *testing.T) {
	zero := 0.0
	cases := [...]struct {
		in float64
		s  string
	}{
		{math.NaN(), "NaN"}, {-math.NaN(), "NaN"},
		{math.Inf(1), "+Inf"}, {math.Inf(-1), "-Inf"},
		{zero, "0"}, {-zero, "-0"},
		{1e+00, "1B"}, {1e+01, "10B"}, {1e+02, "100B"}, {1e+03, "1000B"},
		{2e+03, "2000B"}, {4e+03, "3.91KiB"}, {6e+03, "5.86KiB"}, {8e+03, "7.81KiB"},
		{1e+04, "9.77KiB"}, {1e+05, "97.7KiB"}, {1e+06, "977KiB"}, {1e+07, "9.54MiB"},
		{1e+08, "95.4MiB"}, {1e+09, "954MiB"}, {1e+10, "9.31GiB"}, {1e+11, "93.1GiB"},
		{1e+12, "931GiB"}, {1e+13, "9.09TiB"}, {1e+14, "90.9TiB"}, {1e+15, "909TiB"},
		{1e+16, "8.88PiB"}, {1e+17, "88.8PiB"}, {1e+18, "888PiB"}, {1e+19, "8.67EiB"},
		{1e+20, "86.7EiB"}, {1e+21, "867EiB"}, {1e+22, "8.47ZiB"}, {1e+23, "84.7ZiB"},
		{1e+24, "847ZiB"}, {1e+25, "8.27YiB"}, {1e+26, "82.7YiB"}, {1e+27, "827YiB"},
		{1e+28, "8272YiB"}, {1e+29, "82718YiB"},
	}
	for _, c := range cases {
		result := formats.IECBytes(c.in)
		if result != c.s {
			t.Fatalf("expect \"%s\", got \"%s\"", c.s, result)
		}
		fmt.Printf("|%16s|\n", result)
		// fmt.Printf("{%.0e, \"%s\"},\n", c.in, result)
	}
}

func TestDuration(t *testing.T) {
	cases := [...]struct {
		in                         time.Duration
		secs, millis, nanos, human string
	}{
		{1 * time.Minute, "1:00", "1:00.000", "1:00.000000000", "1:00.0"},
		{math.MaxInt64, "106751d23:47:16", "106751d23:47:16.854", "106751d23:47:16.854775807", "106751d23:47:17"},
		{math.MinInt64, "-106751d23:47:16", "-106751d23:47:16.854", "-106751d23:47:16.854775808", "-106751d23:47:17"},
		{0, "0:00", "0:00.000", "0:00.000000000", "0"},
		{1, "0:00", "0:00.000", "0:00.000000001", "1ns"},
		{-1, "-0:00", "-0:00.000", "-0:00.000000001", "-1ns"},
		{4, "0:00", "0:00.000", "0:00.000000004", "4ns"},
		{-4, "-0:00", "-0:00.000", "-0:00.000000004", "-4ns"},
		{16, "0:00", "0:00.000", "0:00.000000016", "16ns"},
		{-16, "-0:00", "-0:00.000", "-0:00.000000016", "-16ns"},
		{64, "0:00", "0:00.000", "0:00.000000064", "64ns"},
		{-64, "-0:00", "-0:00.000", "-0:00.000000064", "-64ns"},
		{256, "0:00", "0:00.000", "0:00.000000256", "256ns"},
		{-256, "-0:00", "-0:00.000", "-0:00.000000256", "-256ns"},
		{1024, "0:00", "0:00.000", "0:00.000001024", "1024ns"},
		{-1024, "-0:00", "-0:00.000", "-0:00.000001024", "-1024ns"},
		{4096, "0:00", "0:00.000", "0:00.000004096", "4096ns"},
		{-4096, "-0:00", "-0:00.000", "-0:00.000004096", "-4096ns"},
		{16384, "0:00", "0:00.000", "0:00.000016384", "16.38µs"},
		{-16384, "-0:00", "-0:00.000", "-0:00.000016384", "-16.38µs"},
		{65536, "0:00", "0:00.000", "0:00.000065536", "65.54µs"},
		{-65536, "-0:00", "-0:00.000", "-0:00.000065536", "-65.54µs"},
		{262144, "0:00", "0:00.000", "0:00.000262144", "262.1µs"},
		{-262144, "-0:00", "-0:00.000", "-0:00.000262144", "-262.1µs"},
		{1048576, "0:00", "0:00.001", "0:00.001048576", "1049µs"},
		{-1048576, "-0:00", "-0:00.001", "-0:00.001048576", "-1049µs"},
		{4194304, "0:00", "0:00.004", "0:00.004194304", "4194µs"},
		{-4194304, "-0:00", "-0:00.004", "-0:00.004194304", "-4194µs"},
		{16777216, "0:00", "0:00.016", "0:00.016777216", "16.78ms"},
		{-16777216, "-0:00", "-0:00.016", "-0:00.016777216", "-16.78ms"},
		{67108864, "0:00", "0:00.067", "0:00.067108864", "67.11ms"},
		{-67108864, "-0:00", "-0:00.067", "-0:00.067108864", "-67.11ms"},
		{268435456, "0:00", "0:00.268", "0:00.268435456", "268.4ms"},
		{-268435456, "-0:00", "-0:00.268", "-0:00.268435456", "-268.4ms"},
		{1073741824, "0:01", "0:01.073", "0:01.073741824", "1074ms"},
		{-1073741824, "-0:01", "-0:01.073", "-0:01.073741824", "-1074ms"},
		{4294967296, "0:04", "0:04.294", "0:04.294967296", "4295ms"},
		{-4294967296, "-0:04", "-0:04.294", "-0:04.294967296", "-4295ms"},
		{17179869184, "0:17", "0:17.179", "0:17.179869184", "17.18s"},
		{-17179869184, "-0:17", "-0:17.179", "-0:17.179869184", "-17.18s"},
		{68719476736, "1:08", "1:08.719", "1:08.719476736", "1:08.7"},
		{-68719476736, "-1:08", "-1:08.719", "-1:08.719476736", "-1:08.7"},
		{274877906944, "4:34", "4:34.877", "4:34.877906944", "4:34.9"},
		{-274877906944, "-4:34", "-4:34.877", "-4:34.877906944", "-4:34.9"},
		{1099511627776, "18:19", "18:19.511", "18:19.511627776", "18:20"},
		{-1099511627776, "-18:19", "-18:19.511", "-18:19.511627776", "-18:20"},
		{4398046511104, "1:13:18", "1:13:18.046", "1:13:18.046511104", "1:13:18"},
		{-4398046511104, "-1:13:18", "-1:13:18.046", "-1:13:18.046511104", "-1:13:18"},
		{17592186044416, "4:53:12", "4:53:12.186", "4:53:12.186044416", "4:53:12"},
		{-17592186044416, "-4:53:12", "-4:53:12.186", "-4:53:12.186044416", "-4:53:12"},
		{70368744177664, "19:32:48", "19:32:48.744", "19:32:48.744177664", "19:32:49"},
		{-70368744177664, "-19:32:48", "-19:32:48.744", "-19:32:48.744177664", "-19:32:49"},
		{281474976710656, "3d06:11:14", "3d06:11:14.976", "3d06:11:14.976710656", "3d06:11:15"},
		{-281474976710656, "-3d06:11:14", "-3d06:11:14.976", "-3d06:11:14.976710656", "-3d06:11:15"},
		{1125899906842624, "13d00:44:59", "13d00:44:59.906", "13d00:44:59.906842624", "13d00:44:60"},
		{-1125899906842624, "-13d00:44:59", "-13d00:44:59.906", "-13d00:44:59.906842624", "-13d00:44:60"},
		{4503599627370496, "52d02:59:59", "52d02:59:59.627", "52d02:59:59.627370496", "52d02:59:60"},
		{-4503599627370496, "-52d02:59:59", "-52d02:59:59.627", "-52d02:59:59.627370496", "-52d02:59:60"},
		{18014398509481984, "208d11:59:58", "208d11:59:58.509", "208d11:59:58.509481984", "208d11:59:59"},
		{-18014398509481984, "-208d11:59:58", "-208d11:59:58.509", "-208d11:59:58.509481984", "-208d11:59:59"},
		{72057594037927936, "833d23:59:54", "833d23:59:54.037", "833d23:59:54.037927936", "833d23:59:54"},
		{-72057594037927936, "-833d23:59:54", "-833d23:59:54.037", "-833d23:59:54.037927936", "-833d23:59:54"},
		{288230376151711744, "3335d23:59:36", "3335d23:59:36.151", "3335d23:59:36.151711744", "3335d23:59:36"},
		{-288230376151711744, "-3335d23:59:36", "-3335d23:59:36.151", "-3335d23:59:36.151711744", "-3335d23:59:36"},
		{1152921504606846976, "13343d23:58:24", "13343d23:58:24.606", "13343d23:58:24.606846976", "13343d23:58:25"},
		{-1152921504606846976, "-13343d23:58:24", "-13343d23:58:24.606", "-13343d23:58:24.606846976", "-13343d23:58:25"},
	}
	for _, c := range cases {
		secs := formats.DurationSeconds(c.in)
		millis := formats.DurationMillis(c.in)
		nanos := formats.DurationNanos(c.in)
		human := formats.Duration(c.in)
		if secs != c.secs {
			t.Fatalf("expect \"%s\", got \"%s\"", c.secs, secs)
		}
		if millis != c.millis {
			t.Fatalf("expect \"%s\", got \"%s\"", c.millis, millis)
		}
		if nanos != c.nanos {
			t.Fatalf("expect \"%s\", got \"%s\"", c.nanos, nanos)
		}
		if human != c.human {
			t.Fatalf("expect \"%s\", got \"%s\"", c.human, human)
		}
		fmt.Printf("|%16s|%20s|%26s|%16s|\n", secs, millis, nanos, human)
		// fmt.Printf("{%d, \"%s\", \"%s\", \"%s\", \"%s\"},\n", c.in,
		// 	secs, millis, nanos, human)
	}
}
